name: Lint & Test Fr-API üÉè
on:
  push:
    branches: [ chore/*, feat/*, refactor/*, test/* ]
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
jobs:

  lint:
    name: üö¶ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "19.x"

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1

      - name: üî¨ Lint
        run: npm run lint

  test:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚öô Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "19.x"

      - name: üì• Download dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:unit
        env:
          LOG_DIR: '../logs'
          SECRET_KEY: 'secretKey'
          TWILIO_ACCOUNT_SID: 'ACfakeAccountSID'
          TWILIO_AUTH_TOKEN: 'fakeAuthToken'

  intTest:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # Set the Stripe access key from GitHub secret
      AWS_BUCKET: 'francoisrentals'
      AWS_REGION: 'us-east-2'
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Set the Stripe access key from GitHub secret
      BUCKET_NAME: 'francoisrentals'
      CI: true
      DB_IP: '127.0.0.1'
      DB_MEMORY: 'false'
      DB_PORT: '27017'
      LOG_DIR: '../logs'
      MONGO_PASSWORD: adminpassword
      MONGO_URI: 'mongodb://0.0.0.0:27017'
      MONGO_USERNAME: admin
      ROOT_URI: 'http://localhost:3000'
      SECRET_KEY: 'secretKey'
      STRIPE_ACCESS_KEY: ${{ secrets.STRIPE_ACCESS_KEY }} # Set the Stripe access key from GitHub secret
      TWILIO_ACCOUNT_SID: 'ACfakeAccountSID'
      TWILIO_AUTH_TOKEN: 'fakeAuthToken'

    name: üéõÔ∏è Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚öô Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "19.x"

      - name: üì• Download dependencies
        run: npm ci

      - name: üë∑üèΩ‚Äç Rebuild bcrypt
        run: npm rebuild --update-binary bcrypt

      - name: üçÉ üê≥ Run MongoDB Docker Container
        run: |
          docker run -d --name fr-db -p 27017:27017 mongo

      - name: üï§ Wait for MongoDB to start
        run: sleep 20

      - name: Run Integration Tests
        run: npm run test:int
        env:
          STRIPE_ACCESS_KEY: ${{ secrets.STRIPE_ACCESS_KEY }}

  apiTest:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # Set the Stripe access key from GitHub secret
      AWS_BUCKET: 'francoisrentals'
      AWS_REGION: 'us-east-2'
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Set the Stripe access key from GitHub secret
      BUCKET_NAME: 'francoisrentals'
      CI: true
      DB_IP: '127.0.0.1'
      DB_MEMORY: 'false'
      DB_PORT: '27017'
      LOG_DIR: '../logs'
      MONGO_PASSWORD: adminpassword
      MONGO_URI: 'mongodb://0.0.0.0:27017'
      MONGO_USERNAME: admin
      PORT: 3000
      ROOT_URI: 'http://localhost:3000'
      SECRET_KEY: 'secretKey'
      STRIPE_ACCESS_KEY: ${{ secrets.STRIPE_ACCESS_KEY }} # Set the Stripe access key from GitHub secret
      TWILIO_ACCOUNT_SID: 'ACfakeAccountSID'
      TWILIO_AUTH_TOKEN: 'fakeAuthToken'
      USER_EMAIL: 'tenant1@gmail.com'
      USER_PASSWORD: 'password'


    name: üß¨ API Tests
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "19.x"

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1

      - name: üë∑üèΩ‚Äç Rebuild bcrypt
        run: npm rebuild --update-binary bcrypt

      - name: üçÉ üê≥ Run MongoDB Docker Container
        run: docker run -d --name fr-db -p 27017:27017 mongo

      - name: üï§ Wait for MongoDB to start
        run: sleep 20

      - name: start the API
        run: npm run build && npm run start:ci &

      - name: Wait for Localhost:3000 to be up
        id: wait-for-localhost
        run: |
          for i in {1..30}; do # Wait for up to 30 seconds
            if curl -I -s http://localhost:3000 | grep -q "200 OK"; then
              echo "Localhost:3000 is up and running."
              exit 0
            fi
            sleep 1
          done
          echo "Localhost:3000 did not start within the time limit."
          exit 1



      - name: Run API tests
        run: npm run test:api:development
        env:
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      - name: Kill Running Application
        run: pkill -f "npm run start:ci"
